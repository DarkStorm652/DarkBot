import org.gradle.plugins.ide.eclipse.model.ProjectDependency
import org.gradle.plugins.ide.eclipse.model.SourceFolder

version = '2.0.0-alpha'

configure(allprojects) { project ->
	project.group = 'org.darkstorm.darkbot'

	apply plugin: 'eclipse'
	apply plugin: 'idea'
}


configure(subprojects) { subproject ->
	apply plugin: 'java'

	archivesBaseName = 'DarkBot'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
		mavenLocal()
	}

	dependencies {
		compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
		compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.1'
		compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.1'
		compile group: 'org.jdom', name: 'jdom2', version: '2.0.6'
		compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '3.2'
		compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
		compile group: 'com.jtattoo', name: 'JTattoo', version: '1.6.11'

		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	task pack(type: Jar) {
		manifest {
			attributes('Implementation-Title': subproject.name,
					'Implementation-Version': subproject.version)
		}
		baseName = subproject.name + '-all'
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
	}
	tasks.assemble.dependsOn(pack)


	eclipse {
		classpath {
			downloadSources = true

			// Prevent addition of duplicate JREs to classpath
			def hasContainer = true
			containers.clear()
			file.beforeMerged { classpath ->
				if(!classpath.entries.find { entry -> entry.kind == 'con' }) {
					containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8')
					hasContainer = false
				}
			}
			file.whenMerged { classpath ->
				if(!hasContainer)
					classpath.entries.findAll { entry -> entry.kind == 'con' }*.exported = false
			}

			// Replace classpath entries with project dependencies (GRADLE-1116)
			// http://issues.gradle.org/browse/GRADLE-1116
			file.whenMerged { classpath ->
				def regexp = /.*?\/([^\/]+)\/build\/[^\/]+\/(?:main|test)/
				def projectOutputDependencies = classpath.entries.findAll { entry -> entry.path =~ regexp }
				projectOutputDependencies.each { entry ->
					def matcher = (entry.path =~ regexp)
					if (matcher) {
						def projectName = matcher[0][1]
						def path = "/${projectName}".toString()
						if(!classpath.entries.find { e -> e instanceof ProjectDependency && e.path == path }) {
							def dependency = new ProjectDependency(path, project(":${projectName}").path)
							dependency.exported = true
							classpath.entries.add(dependency)
						}
						classpath.entries.remove(entry)
					}
				}
				classpath.entries.removeAll { entry -> (entry.path =~ /(?!.*?repack.*\.jar).*?\/([^\/]+)\/build\/libs\/[^\/]+\.jar/) }
			}

			// Use separate main/test outputs
			defaultOutputDir = file(subproject.name + "/bin/eclipse")
			file.beforeMerged { classpath ->
				classpath.entries.findAll { it instanceof SourceFolder }.each {
					if(it.output != null && it.output.startsWith("bin/")) {
						it.output = null
					}
				}
			}
			file.whenMerged { classpath ->
				classpath.entries.findAll { it instanceof SourceFolder }.each {
					it.output = "bin/" + it.path.split("/")[1]
				}
			}

			// Ensure project dependencies come after 3rd-party libs
			eclipse.classpath.file.whenMerged { classpath ->
				classpath.entries.findAll { it instanceof ProjectDependency }.each {
					// delete from original position
					classpath.entries.remove(it)
					// append to end of classpath
					classpath.entries.add(it)
				}
			}
		}
	}
}



